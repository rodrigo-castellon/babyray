// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.6.1
// source: rayclient.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GlobalScheduler_Schedule_FullMethodName  = "/ray.GlobalScheduler/Schedule"
	GlobalScheduler_Heartbeat_FullMethodName = "/ray.GlobalScheduler/Heartbeat"
)

// GlobalSchedulerClient is the client API for GlobalScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalSchedulerClient interface {
	Schedule(ctx context.Context, in *GlobalScheduleRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type globalSchedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalSchedulerClient(cc grpc.ClientConnInterface) GlobalSchedulerClient {
	return &globalSchedulerClient{cc}
}

func (c *globalSchedulerClient) Schedule(ctx context.Context, in *GlobalScheduleRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, GlobalScheduler_Schedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalSchedulerClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, GlobalScheduler_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlobalSchedulerServer is the server API for GlobalScheduler service.
// All implementations must embed UnimplementedGlobalSchedulerServer
// for forward compatibility
type GlobalSchedulerServer interface {
	Schedule(context.Context, *GlobalScheduleRequest) (*StatusResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*StatusResponse, error)
	mustEmbedUnimplementedGlobalSchedulerServer()
}

// UnimplementedGlobalSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedGlobalSchedulerServer struct {
}

func (UnimplementedGlobalSchedulerServer) Schedule(context.Context, *GlobalScheduleRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schedule not implemented")
}
func (UnimplementedGlobalSchedulerServer) Heartbeat(context.Context, *HeartbeatRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedGlobalSchedulerServer) mustEmbedUnimplementedGlobalSchedulerServer() {}

// UnsafeGlobalSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalSchedulerServer will
// result in compilation errors.
type UnsafeGlobalSchedulerServer interface {
	mustEmbedUnimplementedGlobalSchedulerServer()
}

func RegisterGlobalSchedulerServer(s grpc.ServiceRegistrar, srv GlobalSchedulerServer) {
	s.RegisterService(&GlobalScheduler_ServiceDesc, srv)
}

func _GlobalScheduler_Schedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalSchedulerServer).Schedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalScheduler_Schedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalSchedulerServer).Schedule(ctx, req.(*GlobalScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalScheduler_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalSchedulerServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalScheduler_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalSchedulerServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GlobalScheduler_ServiceDesc is the grpc.ServiceDesc for GlobalScheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalScheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.GlobalScheduler",
	HandlerType: (*GlobalSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Schedule",
			Handler:    _GlobalScheduler_Schedule_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _GlobalScheduler_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rayclient.proto",
}

const (
	LocalScheduler_Schedule_FullMethodName     = "/ray.LocalScheduler/Schedule"
	LocalScheduler_KillServer_FullMethodName   = "/ray.LocalScheduler/KillServer"
	LocalScheduler_ReviveServer_FullMethodName = "/ray.LocalScheduler/ReviveServer"
)

// LocalSchedulerClient is the client API for LocalScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// START WORKER NODE LOCAL SCHEDULER
type LocalSchedulerClient interface {
	Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	KillServer(ctx context.Context, in *StatusResponse, opts ...grpc.CallOption) (*StatusResponse, error)
	ReviveServer(ctx context.Context, in *StatusResponse, opts ...grpc.CallOption) (*StatusResponse, error)
}

type localSchedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalSchedulerClient(cc grpc.ClientConnInterface) LocalSchedulerClient {
	return &localSchedulerClient{cc}
}

func (c *localSchedulerClient) Schedule(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, LocalScheduler_Schedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localSchedulerClient) KillServer(ctx context.Context, in *StatusResponse, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, LocalScheduler_KillServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localSchedulerClient) ReviveServer(ctx context.Context, in *StatusResponse, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, LocalScheduler_ReviveServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalSchedulerServer is the server API for LocalScheduler service.
// All implementations must embed UnimplementedLocalSchedulerServer
// for forward compatibility
//
// START WORKER NODE LOCAL SCHEDULER
type LocalSchedulerServer interface {
	Schedule(context.Context, *ScheduleRequest) (*ScheduleResponse, error)
	KillServer(context.Context, *StatusResponse) (*StatusResponse, error)
	ReviveServer(context.Context, *StatusResponse) (*StatusResponse, error)
	mustEmbedUnimplementedLocalSchedulerServer()
}

// UnimplementedLocalSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedLocalSchedulerServer struct {
}

func (UnimplementedLocalSchedulerServer) Schedule(context.Context, *ScheduleRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schedule not implemented")
}
func (UnimplementedLocalSchedulerServer) KillServer(context.Context, *StatusResponse) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillServer not implemented")
}
func (UnimplementedLocalSchedulerServer) ReviveServer(context.Context, *StatusResponse) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviveServer not implemented")
}
func (UnimplementedLocalSchedulerServer) mustEmbedUnimplementedLocalSchedulerServer() {}

// UnsafeLocalSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalSchedulerServer will
// result in compilation errors.
type UnsafeLocalSchedulerServer interface {
	mustEmbedUnimplementedLocalSchedulerServer()
}

func RegisterLocalSchedulerServer(s grpc.ServiceRegistrar, srv LocalSchedulerServer) {
	s.RegisterService(&LocalScheduler_ServiceDesc, srv)
}

func _LocalScheduler_Schedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSchedulerServer).Schedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalScheduler_Schedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSchedulerServer).Schedule(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalScheduler_KillServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSchedulerServer).KillServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalScheduler_KillServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSchedulerServer).KillServer(ctx, req.(*StatusResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalScheduler_ReviveServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalSchedulerServer).ReviveServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalScheduler_ReviveServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalSchedulerServer).ReviveServer(ctx, req.(*StatusResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalScheduler_ServiceDesc is the grpc.ServiceDesc for LocalScheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalScheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.LocalScheduler",
	HandlerType: (*LocalSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Schedule",
			Handler:    _LocalScheduler_Schedule_Handler,
		},
		{
			MethodName: "KillServer",
			Handler:    _LocalScheduler_KillServer_Handler,
		},
		{
			MethodName: "ReviveServer",
			Handler:    _LocalScheduler_ReviveServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rayclient.proto",
}

const (
	LocalObjStore_Store_FullMethodName         = "/ray.LocalObjStore/Store"
	LocalObjStore_Get_FullMethodName           = "/ray.LocalObjStore/Get"
	LocalObjStore_LocationFound_FullMethodName = "/ray.LocalObjStore/LocationFound"
	LocalObjStore_Copy_FullMethodName          = "/ray.LocalObjStore/Copy"
	LocalObjStore_AvgBandwidth_FullMethodName  = "/ray.LocalObjStore/AvgBandwidth"
)

// LocalObjStoreClient is the client API for LocalObjStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// START WORKER NODE LOCAL OBJECT STORE
type LocalObjStoreClient interface {
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	LocationFound(ctx context.Context, in *LocationFoundCallback, opts ...grpc.CallOption) (*StatusResponse, error)
	Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error)
	AvgBandwidth(ctx context.Context, in *StatusResponse, opts ...grpc.CallOption) (*BandwidthResponse, error)
}

type localObjStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalObjStoreClient(cc grpc.ClientConnInterface) LocalObjStoreClient {
	return &localObjStoreClient{cc}
}

func (c *localObjStoreClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, LocalObjStore_Store_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localObjStoreClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, LocalObjStore_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localObjStoreClient) LocationFound(ctx context.Context, in *LocationFoundCallback, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, LocalObjStore_LocationFound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localObjStoreClient) Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*CopyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyResponse)
	err := c.cc.Invoke(ctx, LocalObjStore_Copy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localObjStoreClient) AvgBandwidth(ctx context.Context, in *StatusResponse, opts ...grpc.CallOption) (*BandwidthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BandwidthResponse)
	err := c.cc.Invoke(ctx, LocalObjStore_AvgBandwidth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalObjStoreServer is the server API for LocalObjStore service.
// All implementations must embed UnimplementedLocalObjStoreServer
// for forward compatibility
//
// START WORKER NODE LOCAL OBJECT STORE
type LocalObjStoreServer interface {
	Store(context.Context, *StoreRequest) (*StatusResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	LocationFound(context.Context, *LocationFoundCallback) (*StatusResponse, error)
	Copy(context.Context, *CopyRequest) (*CopyResponse, error)
	AvgBandwidth(context.Context, *StatusResponse) (*BandwidthResponse, error)
	mustEmbedUnimplementedLocalObjStoreServer()
}

// UnimplementedLocalObjStoreServer must be embedded to have forward compatible implementations.
type UnimplementedLocalObjStoreServer struct {
}

func (UnimplementedLocalObjStoreServer) Store(context.Context, *StoreRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedLocalObjStoreServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLocalObjStoreServer) LocationFound(context.Context, *LocationFoundCallback) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocationFound not implemented")
}
func (UnimplementedLocalObjStoreServer) Copy(context.Context, *CopyRequest) (*CopyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedLocalObjStoreServer) AvgBandwidth(context.Context, *StatusResponse) (*BandwidthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvgBandwidth not implemented")
}
func (UnimplementedLocalObjStoreServer) mustEmbedUnimplementedLocalObjStoreServer() {}

// UnsafeLocalObjStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalObjStoreServer will
// result in compilation errors.
type UnsafeLocalObjStoreServer interface {
	mustEmbedUnimplementedLocalObjStoreServer()
}

func RegisterLocalObjStoreServer(s grpc.ServiceRegistrar, srv LocalObjStoreServer) {
	s.RegisterService(&LocalObjStore_ServiceDesc, srv)
}

func _LocalObjStore_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalObjStoreServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalObjStore_Store_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalObjStoreServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalObjStore_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalObjStoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalObjStore_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalObjStoreServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalObjStore_LocationFound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationFoundCallback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalObjStoreServer).LocationFound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalObjStore_LocationFound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalObjStoreServer).LocationFound(ctx, req.(*LocationFoundCallback))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalObjStore_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalObjStoreServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalObjStore_Copy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalObjStoreServer).Copy(ctx, req.(*CopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalObjStore_AvgBandwidth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalObjStoreServer).AvgBandwidth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalObjStore_AvgBandwidth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalObjStoreServer).AvgBandwidth(ctx, req.(*StatusResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalObjStore_ServiceDesc is the grpc.ServiceDesc for LocalObjStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalObjStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.LocalObjStore",
	HandlerType: (*LocalObjStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _LocalObjStore_Store_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LocalObjStore_Get_Handler,
		},
		{
			MethodName: "LocationFound",
			Handler:    _LocalObjStore_LocationFound_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _LocalObjStore_Copy_Handler,
		},
		{
			MethodName: "AvgBandwidth",
			Handler:    _LocalObjStore_AvgBandwidth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rayclient.proto",
}

const (
	Worker_Run_FullMethodName          = "/ray.Worker/Run"
	Worker_WorkerStatus_FullMethodName = "/ray.Worker/WorkerStatus"
)

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// START WORKER SERVICE
type WorkerClient interface {
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	WorkerStatus(ctx context.Context, in *StatusResponse, opts ...grpc.CallOption) (*WorkerStatusResponse, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Worker_Run_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) WorkerStatus(ctx context.Context, in *StatusResponse, opts ...grpc.CallOption) (*WorkerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkerStatusResponse)
	err := c.cc.Invoke(ctx, Worker_WorkerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
//
// START WORKER SERVICE
type WorkerServer interface {
	Run(context.Context, *RunRequest) (*StatusResponse, error)
	WorkerStatus(context.Context, *StatusResponse) (*WorkerStatusResponse, error)
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) Run(context.Context, *RunRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedWorkerServer) WorkerStatus(context.Context, *StatusResponse) (*WorkerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkerStatus not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_WorkerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).WorkerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_WorkerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).WorkerStatus(ctx, req.(*StatusResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Worker_Run_Handler,
		},
		{
			MethodName: "WorkerStatus",
			Handler:    _Worker_WorkerStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rayclient.proto",
}

const (
	GCSObj_NotifyOwns_FullMethodName         = "/ray.GCSObj/NotifyOwns"
	GCSObj_RequestLocation_FullMethodName    = "/ray.GCSObj/RequestLocation"
	GCSObj_GetObjectLocations_FullMethodName = "/ray.GCSObj/GetObjectLocations"
	GCSObj_RegisterLineage_FullMethodName    = "/ray.GCSObj/RegisterLineage"
	GCSObj_RegisterLiveNodes_FullMethodName  = "/ray.GCSObj/RegisterLiveNodes"
	GCSObj_RegisterGenerating_FullMethodName = "/ray.GCSObj/RegisterGenerating"
)

// GCSObjClient is the client API for GCSObj service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// START GCS OBJECT TABLE
type GCSObjClient interface {
	NotifyOwns(ctx context.Context, in *NotifyOwnsRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	RequestLocation(ctx context.Context, in *RequestLocationRequest, opts ...grpc.CallOption) (*RequestLocationResponse, error)
	GetObjectLocations(ctx context.Context, in *ObjectLocationsRequest, opts ...grpc.CallOption) (*ObjectLocationsResponse, error)
	RegisterLineage(ctx context.Context, in *GlobalScheduleRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	RegisterLiveNodes(ctx context.Context, in *LiveNodesRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	RegisterGenerating(ctx context.Context, in *GeneratingRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type gCSObjClient struct {
	cc grpc.ClientConnInterface
}

func NewGCSObjClient(cc grpc.ClientConnInterface) GCSObjClient {
	return &gCSObjClient{cc}
}

func (c *gCSObjClient) NotifyOwns(ctx context.Context, in *NotifyOwnsRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, GCSObj_NotifyOwns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gCSObjClient) RequestLocation(ctx context.Context, in *RequestLocationRequest, opts ...grpc.CallOption) (*RequestLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestLocationResponse)
	err := c.cc.Invoke(ctx, GCSObj_RequestLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gCSObjClient) GetObjectLocations(ctx context.Context, in *ObjectLocationsRequest, opts ...grpc.CallOption) (*ObjectLocationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectLocationsResponse)
	err := c.cc.Invoke(ctx, GCSObj_GetObjectLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gCSObjClient) RegisterLineage(ctx context.Context, in *GlobalScheduleRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, GCSObj_RegisterLineage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gCSObjClient) RegisterLiveNodes(ctx context.Context, in *LiveNodesRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, GCSObj_RegisterLiveNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gCSObjClient) RegisterGenerating(ctx context.Context, in *GeneratingRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, GCSObj_RegisterGenerating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GCSObjServer is the server API for GCSObj service.
// All implementations must embed UnimplementedGCSObjServer
// for forward compatibility
//
// START GCS OBJECT TABLE
type GCSObjServer interface {
	NotifyOwns(context.Context, *NotifyOwnsRequest) (*StatusResponse, error)
	RequestLocation(context.Context, *RequestLocationRequest) (*RequestLocationResponse, error)
	GetObjectLocations(context.Context, *ObjectLocationsRequest) (*ObjectLocationsResponse, error)
	RegisterLineage(context.Context, *GlobalScheduleRequest) (*StatusResponse, error)
	RegisterLiveNodes(context.Context, *LiveNodesRequest) (*StatusResponse, error)
	RegisterGenerating(context.Context, *GeneratingRequest) (*StatusResponse, error)
	mustEmbedUnimplementedGCSObjServer()
}

// UnimplementedGCSObjServer must be embedded to have forward compatible implementations.
type UnimplementedGCSObjServer struct {
}

func (UnimplementedGCSObjServer) NotifyOwns(context.Context, *NotifyOwnsRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyOwns not implemented")
}
func (UnimplementedGCSObjServer) RequestLocation(context.Context, *RequestLocationRequest) (*RequestLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLocation not implemented")
}
func (UnimplementedGCSObjServer) GetObjectLocations(context.Context, *ObjectLocationsRequest) (*ObjectLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectLocations not implemented")
}
func (UnimplementedGCSObjServer) RegisterLineage(context.Context, *GlobalScheduleRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterLineage not implemented")
}
func (UnimplementedGCSObjServer) RegisterLiveNodes(context.Context, *LiveNodesRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterLiveNodes not implemented")
}
func (UnimplementedGCSObjServer) RegisterGenerating(context.Context, *GeneratingRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGenerating not implemented")
}
func (UnimplementedGCSObjServer) mustEmbedUnimplementedGCSObjServer() {}

// UnsafeGCSObjServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GCSObjServer will
// result in compilation errors.
type UnsafeGCSObjServer interface {
	mustEmbedUnimplementedGCSObjServer()
}

func RegisterGCSObjServer(s grpc.ServiceRegistrar, srv GCSObjServer) {
	s.RegisterService(&GCSObj_ServiceDesc, srv)
}

func _GCSObj_NotifyOwns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyOwnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCSObjServer).NotifyOwns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GCSObj_NotifyOwns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCSObjServer).NotifyOwns(ctx, req.(*NotifyOwnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GCSObj_RequestLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCSObjServer).RequestLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GCSObj_RequestLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCSObjServer).RequestLocation(ctx, req.(*RequestLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GCSObj_GetObjectLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCSObjServer).GetObjectLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GCSObj_GetObjectLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCSObjServer).GetObjectLocations(ctx, req.(*ObjectLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GCSObj_RegisterLineage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCSObjServer).RegisterLineage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GCSObj_RegisterLineage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCSObjServer).RegisterLineage(ctx, req.(*GlobalScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GCSObj_RegisterLiveNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCSObjServer).RegisterLiveNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GCSObj_RegisterLiveNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCSObjServer).RegisterLiveNodes(ctx, req.(*LiveNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GCSObj_RegisterGenerating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCSObjServer).RegisterGenerating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GCSObj_RegisterGenerating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCSObjServer).RegisterGenerating(ctx, req.(*GeneratingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GCSObj_ServiceDesc is the grpc.ServiceDesc for GCSObj service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GCSObj_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.GCSObj",
	HandlerType: (*GCSObjServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyOwns",
			Handler:    _GCSObj_NotifyOwns_Handler,
		},
		{
			MethodName: "RequestLocation",
			Handler:    _GCSObj_RequestLocation_Handler,
		},
		{
			MethodName: "GetObjectLocations",
			Handler:    _GCSObj_GetObjectLocations_Handler,
		},
		{
			MethodName: "RegisterLineage",
			Handler:    _GCSObj_RegisterLineage_Handler,
		},
		{
			MethodName: "RegisterLiveNodes",
			Handler:    _GCSObj_RegisterLiveNodes_Handler,
		},
		{
			MethodName: "RegisterGenerating",
			Handler:    _GCSObj_RegisterGenerating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rayclient.proto",
}

const (
	GCSFunc_RegisterFunc_FullMethodName = "/ray.GCSFunc/RegisterFunc"
	GCSFunc_FetchFunc_FullMethodName    = "/ray.GCSFunc/FetchFunc"
)

// GCSFuncClient is the client API for GCSFunc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// START GCS FUNCTION TABLE
type GCSFuncClient interface {
	RegisterFunc(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	FetchFunc(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
}

type gCSFuncClient struct {
	cc grpc.ClientConnInterface
}

func NewGCSFuncClient(cc grpc.ClientConnInterface) GCSFuncClient {
	return &gCSFuncClient{cc}
}

func (c *gCSFuncClient) RegisterFunc(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, GCSFunc_RegisterFunc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gCSFuncClient) FetchFunc(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, GCSFunc_FetchFunc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GCSFuncServer is the server API for GCSFunc service.
// All implementations must embed UnimplementedGCSFuncServer
// for forward compatibility
//
// START GCS FUNCTION TABLE
type GCSFuncServer interface {
	RegisterFunc(context.Context, *RegisterRequest) (*RegisterResponse, error)
	FetchFunc(context.Context, *FetchRequest) (*FetchResponse, error)
	mustEmbedUnimplementedGCSFuncServer()
}

// UnimplementedGCSFuncServer must be embedded to have forward compatible implementations.
type UnimplementedGCSFuncServer struct {
}

func (UnimplementedGCSFuncServer) RegisterFunc(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFunc not implemented")
}
func (UnimplementedGCSFuncServer) FetchFunc(context.Context, *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchFunc not implemented")
}
func (UnimplementedGCSFuncServer) mustEmbedUnimplementedGCSFuncServer() {}

// UnsafeGCSFuncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GCSFuncServer will
// result in compilation errors.
type UnsafeGCSFuncServer interface {
	mustEmbedUnimplementedGCSFuncServer()
}

func RegisterGCSFuncServer(s grpc.ServiceRegistrar, srv GCSFuncServer) {
	s.RegisterService(&GCSFunc_ServiceDesc, srv)
}

func _GCSFunc_RegisterFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCSFuncServer).RegisterFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GCSFunc_RegisterFunc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCSFuncServer).RegisterFunc(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GCSFunc_FetchFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCSFuncServer).FetchFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GCSFunc_FetchFunc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCSFuncServer).FetchFunc(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GCSFunc_ServiceDesc is the grpc.ServiceDesc for GCSFunc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GCSFunc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.GCSFunc",
	HandlerType: (*GCSFuncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterFunc",
			Handler:    _GCSFunc_RegisterFunc_Handler,
		},
		{
			MethodName: "FetchFunc",
			Handler:    _GCSFunc_FetchFunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rayclient.proto",
}
