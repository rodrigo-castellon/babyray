syntax = "proto3";

import "google/protobuf/empty.proto";

package ray;

option go_package = "github.com/rodrigo-castellon/babyray/pkg/grpc;grpc";

/* START GENERIC STUFF */

// Success or failure
message StatusResponse {
  bool success = 1;
  int32 errorCode = 2;
  string errorMessage = 3;
  string details = 4;
}

/* END GENERIC STUFF */

/* START GLOBAL SCHEDULER */

service GlobalScheduler {
  rpc Schedule(GlobalScheduleRequest) returns (StatusResponse);
  rpc Heartbeat(HeartbeatRequest) returns (StatusResponse); 
}

message GlobalScheduleRequest {
  uint64 uid = 1;
  uint64 name = 2;
  bytes args = 3;
  bytes kwargs = 4;

}

message HeartbeatRequest {
  uint64 runningTasks = 1; 
  uint64 queuedTasks = 2; 
  float avgRunningTime = 3; 
  float avgBandwidth = 4; 
}

/* END GLOBAL SCHEDULER */

/* START WORKER NODE LOCAL SCHEDULER */
service LocalScheduler {
  rpc Schedule(ScheduleRequest) returns (ScheduleResponse);
}

message ScheduleRequest {
  uint64 name = 1;
  bytes args = 2;
  bytes kwargs = 3;
}

// returns a Future, which is just the UID for
// the generated object
message ScheduleResponse {
  uint64 uid = 1;
}

/* END WORKER NODE LOCAL SCHEDULER  */

/* START WORKER NODE LOCAL OBJECT STORE */
service LocalObjStore {
  rpc Store(StoreRequest) returns (StatusResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc LocationFound(LocationFoundCallback) returns (StatusResponse); 
  rpc Copy(CopyRequest) returns (CopyResponse); 
  rpc Init(StatusResponse) returns (StatusResponse); 
}

message StoreRequest {
  uint64 uid = 1;
  bytes objectBytes = 2;
}

message GetRequest {
  uint64 uid = 1;
  bool testing = 2; 
}

message GetResponse {
  uint64 uid = 1; 
  bytes objectBytes = 2;
  bool local = 3; 
}

message LocationFoundCallback { 
  uint64 uid = 1; // this is the uid of the object that was originally asked for
  uint64 location = 2; // this is the node number of the node who has this object
  string address = 3; //For testing
  uint64 port = 4; //For testing
}

message CopyRequest {
  uint64 uid = 1; 
  uint64 requester = 2; 
}

message CopyResponse {
  uint64 uid = 1; 
  bytes objectBytes = 2; 
}

/* END WORKER NODE LOCAL OBJECT STORE */

/* START WORKER SERVICE */
service Worker {
  rpc Run(RunRequest) returns (StatusResponse);
}

message RunRequest {
  uint64 uid = 1;
  uint64 name = 2;
  bytes args = 3;
  bytes kwargs = 4;
}


/* END WORKER SERVICE */

/* START GCS OBJECT TABLE */
service GCSObj {
  rpc NotifyOwns(NotifyOwnsRequest) returns (StatusResponse);
  rpc RequestLocation(RequestLocationRequest) returns (RequestLocationResponse);
}

message NotifyOwnsRequest {
  uint64 uid = 1;
  uint64 nodeId = 2;
}

message RequestLocationRequest {
  uint64 uid = 1;
  uint64 requester = 2; 
}

message RequestLocationResponse { 
  bool immediatelyFound = 1;
}

/* END GCS OBJECT TABLE */

/* START GCS FUNCTION TABLE */
service GCSFunc {
  rpc RegisterFunc(RegisterRequest) returns (RegisterResponse);
  rpc FetchFunc(FetchRequest) returns (FetchResponse);
}

message RegisterRequest {
  bytes serializedFunc = 1;
}

message RegisterResponse {
  uint64 name = 1;
}

message FetchRequest {
  uint64 name = 1;
  uint64 callbackNodeId = 2;
}

message FetchResponse {
  bytes serializedFunc = 1;
}

/* END GCS FUNCTION TABLE */